{"ast":null,"code":"import api from '../../services/api';\nimport { AUTH_LOADING, AUTH_SUCCESS, AUTH_FAILURE, LOGOUT, CLEAR_AUTH_ERROR, SET_USER, UPDATE_USER } from './types';\n\n// API Base URL\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Set token in localStorage and api defaults\nconst setAuthToken = token => {\n  if (token) {\n    localStorage.setItem('token', token);\n    // The api interceptor will handle adding the Bearer token\n  } else {\n    localStorage.removeItem('token');\n  }\n};\n\n// Load user from token\nexport const loadUser = () => async dispatch => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    setAuthToken(token);\n    try {\n      dispatch({\n        type: AUTH_LOADING\n      });\n      const res = await api.get('/auth/verify');\n      dispatch({\n        type: AUTH_SUCCESS,\n        payload: {\n          token,\n          user: res.data.user\n        }\n      });\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Load user error:', error);\n      dispatch({\n        type: AUTH_FAILURE,\n        payload: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to load user'\n      });\n      setAuthToken(null);\n    }\n  }\n};\n\n// Register user\nexport const register = userData => async dispatch => {\n  try {\n    dispatch({\n      type: AUTH_LOADING\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await api.post('/auth/register', userData);\n    const {\n      token,\n      user\n    } = res.data;\n    setAuthToken(token);\n    dispatch({\n      type: AUTH_SUCCESS,\n      payload: {\n        token,\n        user\n      }\n    });\n    return {\n      success: true,\n      message: res.data.message\n    };\n  } catch (error) {\n    var _error$response2, _error$response2$data, _error$response3, _error$response3$data;\n    console.error('Registration error:', error);\n    const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Registration failed';\n    const errors = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.errors) || [];\n    dispatch({\n      type: AUTH_FAILURE,\n      payload: errorMessage\n    });\n    return {\n      success: false,\n      message: errorMessage,\n      errors\n    };\n  }\n};\n\n// Login user\nexport const login = (email, password) => async dispatch => {\n  try {\n    console.log('Attempting login for:', email);\n\n    // Clear any existing auth state before attempting login\n    setAuthToken(null);\n    dispatch({\n      type: AUTH_LOADING\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post(`${API_URL}/auth/login`, {\n      email,\n      password\n    }, config);\n    console.log('Login response:', res.data);\n    const {\n      token,\n      user\n    } = res.data;\n    setAuthToken(token);\n    dispatch({\n      type: AUTH_SUCCESS,\n      payload: {\n        token,\n        user\n      }\n    });\n    return {\n      success: true,\n      message: res.data.message\n    };\n  } catch (error) {\n    var _error$response4, _error$response5, _error$response5$data;\n    console.error('Login error:', error);\n    console.error('Error response:', (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data);\n    const errorMessage = ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Login failed';\n\n    // Clear auth state on login failure\n    setAuthToken(null);\n    dispatch({\n      type: AUTH_FAILURE,\n      payload: errorMessage\n    });\n    return {\n      success: false,\n      message: errorMessage\n    };\n  }\n};\n\n// Logout user\nexport const logout = () => dispatch => {\n  setAuthToken(null);\n  dispatch({\n    type: LOGOUT\n  });\n};\n\n// Clear auth error\nexport const clearAuthError = () => dispatch => {\n  dispatch({\n    type: CLEAR_AUTH_ERROR\n  });\n};\n\n// Get user profile\nexport const getUserProfile = () => async dispatch => {\n  try {\n    const res = await axios.get(`${API_URL}/auth/profile`);\n    dispatch({\n      type: SET_USER,\n      payload: res.data.user\n    });\n    return {\n      success: true,\n      user: res.data.user\n    };\n  } catch (error) {\n    var _error$response6, _error$response6$data;\n    console.error('Get profile error:', error);\n    return {\n      success: false,\n      message: ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to get profile'\n    };\n  }\n};\n\n// Update user profile\nexport const updateProfile = profileData => async dispatch => {\n  try {\n    console.log('Redux updateProfile - sending data:', profileData);\n    console.log('Redux updateProfile - token exists:', !!localStorage.getItem('token'));\n    const res = await axios.put(`${API_URL}/auth/profile`, profileData);\n    console.log('Redux updateProfile - response:', res.data);\n    dispatch({\n      type: UPDATE_USER,\n      payload: res.data.user\n    });\n    return {\n      success: true,\n      message: res.data.message\n    };\n  } catch (error) {\n    var _error$response7, _error$response8, _error$response9, _error$response1, _error$response1$data, _error$response10, _error$response10$dat;\n    console.error('Redux updateProfile error:', error);\n    console.error('Error response:', (_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data);\n    console.error('Error status:', (_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.status);\n    if (((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.status) === 401) {\n      // Token is invalid or expired, logout user\n      console.log('Authentication failed, logging out user');\n      dispatch(logout());\n    } else {\n      var _error$response0, _error$response0$data;\n      dispatch({\n        type: AUTH_FAILURE,\n        payload: ((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : (_error$response0$data = _error$response0.data) === null || _error$response0$data === void 0 ? void 0 : _error$response0$data.message) || 'Failed to update profile'\n      });\n    }\n    return {\n      success: false,\n      message: ((_error$response1 = error.response) === null || _error$response1 === void 0 ? void 0 : (_error$response1$data = _error$response1.data) === null || _error$response1$data === void 0 ? void 0 : _error$response1$data.message) || 'Failed to update profile',\n      errors: ((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : (_error$response10$dat = _error$response10.data) === null || _error$response10$dat === void 0 ? void 0 : _error$response10$dat.errors) || []\n    };\n  }\n};","map":{"version":3,"names":["api","AUTH_LOADING","AUTH_SUCCESS","AUTH_FAILURE","LOGOUT","CLEAR_AUTH_ERROR","SET_USER","UPDATE_USER","API_URL","process","env","REACT_APP_API_URL","setAuthToken","token","localStorage","setItem","removeItem","loadUser","dispatch","getItem","type","res","get","payload","user","data","error","_error$response","_error$response$data","console","response","message","register","userData","config","headers","post","success","_error$response2","_error$response2$data","_error$response3","_error$response3$data","errorMessage","errors","login","email","password","log","axios","_error$response4","_error$response5","_error$response5$data","logout","clearAuthError","getUserProfile","_error$response6","_error$response6$data","updateProfile","profileData","put","_error$response7","_error$response8","_error$response9","_error$response1","_error$response1$data","_error$response10","_error$response10$dat","status","_error$response0","_error$response0$data"],"sources":["C:/Users/2189910/Project Nodejs Updated/frontend/src/redux/actions/authActions.js"],"sourcesContent":["import api from '../../services/api';\r\nimport {\r\n  AUTH_LOADING,\r\n  AUTH_SUCCESS,\r\n  AUTH_FAILURE,\r\n  LOGOUT,\r\n  CLEAR_AUTH_ERROR,\r\n  SET_USER,\r\n  UPDATE_USER\r\n} from './types';\r\n\r\n// API Base URL\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Set token in localStorage and api defaults\r\nconst setAuthToken = (token) => {\r\n  if (token) {\r\n    localStorage.setItem('token', token);\r\n    // The api interceptor will handle adding the Bearer token\r\n  } else {\r\n    localStorage.removeItem('token');\r\n  }\r\n};\r\n\r\n// Load user from token\r\nexport const loadUser = () => async (dispatch) => {\r\n  const token = localStorage.getItem('token');\r\n  \r\n  if (token) {\r\n    setAuthToken(token);\r\n    \r\n    try {\r\n      dispatch({ type: AUTH_LOADING });\r\n      \r\n      const res = await api.get('/auth/verify');\r\n      \r\n      dispatch({\r\n        type: AUTH_SUCCESS,\r\n        payload: {\r\n          token,\r\n          user: res.data.user\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Load user error:', error);\r\n      dispatch({\r\n        type: AUTH_FAILURE,\r\n        payload: error.response?.data?.message || 'Failed to load user'\r\n      });\r\n      setAuthToken(null);\r\n    }\r\n  }\r\n};\r\n\r\n// Register user\r\nexport const register = (userData) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: AUTH_LOADING });\r\n    \r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n    \r\n    const res = await api.post('/auth/register', userData);\r\n    \r\n    const { token, user } = res.data;\r\n    \r\n    setAuthToken(token);\r\n    \r\n    dispatch({\r\n      type: AUTH_SUCCESS,\r\n      payload: {\r\n        token,\r\n        user\r\n      }\r\n    });\r\n    \r\n    return { success: true, message: res.data.message };\r\n  } catch (error) {\r\n    console.error('Registration error:', error);\r\n    const errorMessage = error.response?.data?.message || 'Registration failed';\r\n    const errors = error.response?.data?.errors || [];\r\n    \r\n    dispatch({\r\n      type: AUTH_FAILURE,\r\n      payload: errorMessage\r\n    });\r\n    \r\n    return { \r\n      success: false, \r\n      message: errorMessage, \r\n      errors \r\n    };\r\n  }\r\n};\r\n\r\n// Login user\r\nexport const login = (email, password) => async (dispatch) => {\r\n  try {\r\n    console.log('Attempting login for:', email);\r\n    \r\n    // Clear any existing auth state before attempting login\r\n    setAuthToken(null);\r\n    dispatch({ type: AUTH_LOADING });\r\n    \r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n    \r\n    const res = await axios.post(`${API_URL}/auth/login`, { email, password }, config);\r\n    console.log('Login response:', res.data);\r\n    \r\n    const { token, user } = res.data;\r\n    \r\n    setAuthToken(token);\r\n    \r\n    dispatch({\r\n      type: AUTH_SUCCESS,\r\n      payload: {\r\n        token,\r\n        user\r\n      }\r\n    });\r\n    \r\n    return { success: true, message: res.data.message };\r\n  } catch (error) {\r\n    console.error('Login error:', error);\r\n    console.error('Error response:', error.response?.data);\r\n    const errorMessage = error.response?.data?.message || 'Login failed';\r\n    \r\n    // Clear auth state on login failure\r\n    setAuthToken(null);\r\n    \r\n    dispatch({\r\n      type: AUTH_FAILURE,\r\n      payload: errorMessage\r\n    });\r\n    \r\n    return { \r\n      success: false, \r\n      message: errorMessage \r\n    };\r\n  }\r\n};\r\n\r\n// Logout user\r\nexport const logout = () => (dispatch) => {\r\n  setAuthToken(null);\r\n  dispatch({ type: LOGOUT });\r\n};\r\n\r\n// Clear auth error\r\nexport const clearAuthError = () => (dispatch) => {\r\n  dispatch({ type: CLEAR_AUTH_ERROR });\r\n};\r\n\r\n// Get user profile\r\nexport const getUserProfile = () => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get(`${API_URL}/auth/profile`);\r\n    \r\n    dispatch({\r\n      type: SET_USER,\r\n      payload: res.data.user\r\n    });\r\n    \r\n    return { success: true, user: res.data.user };\r\n  } catch (error) {\r\n    console.error('Get profile error:', error);\r\n    return { \r\n      success: false, \r\n      message: error.response?.data?.message || 'Failed to get profile' \r\n    };\r\n  }\r\n};\r\n\r\n// Update user profile\r\nexport const updateProfile = (profileData) => async (dispatch) => {\r\n  try {\r\n    console.log('Redux updateProfile - sending data:', profileData);\r\n    console.log('Redux updateProfile - token exists:', !!localStorage.getItem('token'));\r\n    \r\n    const res = await axios.put(`${API_URL}/auth/profile`, profileData);\r\n    \r\n    console.log('Redux updateProfile - response:', res.data);\r\n    \r\n    dispatch({\r\n      type: UPDATE_USER,\r\n      payload: res.data.user\r\n    });\r\n    \r\n    return { success: true, message: res.data.message };\r\n  } catch (error) {\r\n    console.error('Redux updateProfile error:', error);\r\n    console.error('Error response:', error.response?.data);\r\n    console.error('Error status:', error.response?.status);\r\n    \r\n    if (error.response?.status === 401) {\r\n      // Token is invalid or expired, logout user\r\n      console.log('Authentication failed, logging out user');\r\n      dispatch(logout());\r\n    } else {\r\n      dispatch({\r\n        type: AUTH_FAILURE,\r\n        payload: error.response?.data?.message || 'Failed to update profile' \r\n      });\r\n    }\r\n    \r\n    return { \r\n      success: false, \r\n      message: error.response?.data?.message || 'Failed to update profile',\r\n      errors: error.response?.data?.errors || []\r\n    };\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}